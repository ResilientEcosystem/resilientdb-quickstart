{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to ResilientDB Quickstart Guide","text":"<p> <p></p> <p> </p> <p>Welcome to the ResilientDB Quickstart Guide\u2014your one-stop shop for all ResilientDB projects and how to get started with them. This documentation provides comprehensive guides to install, use, and contribute to the ResilientDB ecosystem.</p> <p> </p>"},{"location":"#what-is-resilientdb","title":"\ud83d\ude80 What is ResilientDB?","text":"<p>ResilientDB is a high-performance, scalable, and secure blockchain platform designed to meet the demands of modern distributed applications. It offers a suite of tools and projects that enable developers and organizations to build robust blockchain solutions efficiently.</p>"},{"location":"#get-started","title":"\ud83d\udcd6 Get Started","text":"<ul> <li>Installation Guide: Learn how to install all ResilientDB projects using the <code>INSTALL.sh</code> script.</li> <li>Usage Guides: Explore detailed guides on how to use each ResilientDB project.</li> <li>API Reference: Discover the API endpoints provided by the Smart-Contracts GraphQL server.</li> <li>About Us: Learn more about the ResilientDB project and the team behind it.</li> </ul>"},{"location":"#main-repositories","title":"\ud83c\udf10 Main Repositories","text":"<p>Access the main repositories within the ResilientDB Ecosystem and ResilientApps collections:</p> <ul> <li>Apache ResilientDB GitHub</li> <li>ResilientApp GitHub</li> <li>ResilientEcosystem GitHub</li> <li>ResVault</li> <li>ResilientDB GraphQL</li> <li>ResilientDB Python SDK</li> <li>ResCLI</li> <li>ResilientDB Explorer</li> </ul>"},{"location":"#resilientdb-ecosystem","title":"\ud83c\udf0e ResilientDB Ecosystem","text":"<p>Explore the core components and tools designed to interact with and extend the functionality of the ResilientDB platform.</p> <ul> <li>Create Resilient App: CLI tool to bootstrap ResilientDB-based applications.</li> <li>ResDB ORM: An Object-Relational Mapping tool for ResilientDB.</li> <li>ResVault SDK: SDK for secure key management with ResVault.</li> <li>Resilient Node Cache: A caching solution for ResilientDB nodes.</li> <li>ResContract: CLI for managing and deploying contracts on ResilientDB.</li> <li>Smart-Contracts GraphQL: A GraphQL server for interacting with smart contracts.</li> <li>Rust SDK: SDK for Rust applications interacting with ResilientDB.</li> <li>TypeScript SDK: SDK for TypeScript-based ResilientDB projects.</li> <li>Ag-GraphQL: GraphQL API for Ag applications on ResilientDB.</li> <li>Dashboard: Dashboard for monitoring ResilientDB nodes.</li> <li>Website: Source code for the ResilientDB website.</li> <li>ResilientDB Quickstart: A quickstart repository for getting started with the ResilientDB ecosystem.</li> </ul>"},{"location":"#resilientapps","title":"\ud83d\udcf1 ResilientApps","text":"<p>This list includes various applications and tools built on top of the ResilientDB platform, enhancing its use cases and usability.</p> <ul> <li>Demo ResilientApp: Demo showcasing ResilientDB's capabilities.</li> <li>Debitable: Decentralized debit system.</li> <li>Arrayan: Data analysis tool within the ResilientDB ecosystem.</li> <li>ResView: Visualization tool for ResilientDB transactions.</li> <li>ResChat: Decentralized messaging application.</li> <li>ResCLI: CLI tool for managing interactions with ResilientDB.</li> <li>CrypGo: Cryptocurrency tracking app.</li> <li>ResDrive: Decentralized file storage solution.</li> <li>ResLenses: Data analytics tool for the ResilientDB ecosystem.</li> <li>ReLenses Backend: Backend services for ReLenses application.</li> <li>ResUI: UI components for ResilientDB applications.</li> <li>Res-a-Me: Authentication service for ResilientDB.</li> <li>Echo: ResilientDB echo service for testing.</li> <li>ResCounty: Data management tool for government entities.</li> <li>ResChain Analyzer: Blockchain analysis tool.</li> <li>Desktop Wallet: Desktop wallet application for ResilientDB assets.</li> <li>VoteChain: Decentralized voting application.</li> <li>DraftRes: Draft management tool for ResilientDB.</li> <li>NexVault: Enhanced vault solution.</li> <li>ResilientNFT: NFT platform on ResilientDB.</li> </ul>"},{"location":"#why-choose-resilientdb","title":"\ud83d\udca1 Why Choose ResilientDB?","text":"<ul> <li>High Performance: Achieve high transaction throughput with low latency.</li> <li>Scalability: Designed to scale horizontally to meet growing demands.</li> <li>Security: Built with robust security features to protect your data.</li> <li>Flexibility: Modular architecture allows customization to fit your needs.</li> </ul>"},{"location":"#get-involved","title":"\ud83d\udcde Get Involved","text":"<ul> <li>GitHub: ResilientEcosystem</li> <li>Support: If you have any questions or need help, feel free to open an issue.</li> </ul>"},{"location":"about/","title":"About ResilientDB","text":"<p>ResilientDB is an advanced blockchain platform designed to meet the demands of modern decentralized applications. It focuses on delivering high performance, scalability, and robust security features.</p>"},{"location":"about/#our-mission","title":"\ud83c\udfaf Our Mission","text":"<p>To provide a flexible and efficient blockchain infrastructure that empowers developers and organizations to build innovative solutions with ease.</p>"},{"location":"about/#the-team","title":"\ud83d\udc65 The Team","text":"<p>ResilientDB is developed and maintained by a dedicated team of blockchain experts, developers, and researchers from around the world. We are passionate about open-source technology and committed to advancing the blockchain ecosystem.</p>"},{"location":"about/#get-involved","title":"\ud83e\udd1d Get Involved","text":"<p>We welcome contributions from the community!</p> <ul> <li>GitHub: ResilientEcosystem</li> <li>Join the Discussion: Discord Community Forum</li> <li>YouTube: ExpoLab YouTube Channel</li> <li>Website: Live Instance</li> </ul>"},{"location":"about/#acknowledgements","title":"\ud83d\ude4f Acknowledgements","text":"<p>We thank all our contributors and the open-source community for their support and contributions to the ResilientDB project.</p>"},{"location":"api/","title":"API Reference","text":"<p>Welcome to the Smart Contracts GraphQL API Reference. This document provides detailed information about the available API calls, their parameters, and usage examples to help you interact with smart contracts in the ResilientDB ecosystem.</p>"},{"location":"api/#overview","title":"Overview","text":"<p>The Smart Contracts GraphQL API allows you to perform the following operations:</p> <ul> <li>Create a new account</li> <li>Compile a smart contract</li> <li>Deploy a smart contract</li> <li>Execute a function on a deployed smart contract</li> </ul> <p>Endpoint URL: <code>http://localhost:4000/graphql</code></p>"},{"location":"api/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Mutations</li> <li>createAccount</li> <li>compileContract</li> <li>deployContract</li> <li>executeContract</li> <li>Sample Usage</li> <li>Support</li> </ul>"},{"location":"api/#mutations","title":"Mutations","text":""},{"location":"api/#createaccount","title":"createAccount","text":"<p>Creates a new blockchain account.</p> <ul> <li>Type: Mutation</li> <li>Arguments:<ul> <li><code>config</code> (String!): Path to the configuration file.</li> </ul> </li> <li>Returns: The address of the newly created account.</li> </ul> <p>Definition:</p> <p><pre><code>mutation createAccount($config: String!) {\n  createAccount(config: $config): String\n}\n</code></pre> Example: <pre><code>mutation {\n  createAccount(config: \"../path/to/service.config\")\n}\n</code></pre> Sample Response <pre><code>{\n  \"data\": {\n    \"createAccount\": \"0x3b706424119e09dcaad4acf21b10af3b33cde350\"\n  }\n}\n</code></pre></p>"},{"location":"api/#compilecontract","title":"compileContract","text":"<p>Compiles a smart contract from a source file.</p> <p>\u2022  Type: Mutation</p> <p>\u2022  Arguments: * <code>sourcePath</code> (String!): Path to the smart contract source file (e.g., .sol file). * <code>outputPath</code> (String!): Path to save the compiled contract output.</p> <p>\u2022  Returns: A success message or an error message.</p> <p>Definition:</p> <p><pre><code>mutation compileContract($sourcePath: String!, $outputPath: String!) {\n  compileContract(sourcePath: $sourcePath, outputPath: $outputPath): String\n}\n</code></pre> Example: <pre><code>mutation {\n  compileContract(\n    sourcePath: \"/path/to/Token.sol\",\n    outputPath: \"TokenCompiled.json\"\n  )\n}\n</code></pre> Sample Response <pre><code>{\n  \"data\": {\n    \"compileContract\": \"Compiled successfully to TokenCompiled.json\"\n  }\n}\n</code></pre></p>"},{"location":"api/#deploycontract","title":"deployContract","text":"<p>Deploys a compiled smart contract to the blockchain.</p> <p>\u2022  Type: Mutation</p> <p>\u2022  Arguments:</p> <ul> <li> <p><code>config</code> (String!): Path to the configuration file.</p> </li> <li> <p><code>contract</code> (String!): Path to the compiled contract JSON file.</p> </li> <li> <p><code>name</code> (String!): Full name of the contract (e.g., Token.sol:Token).</p> </li> <li> <p><code>arguments</code> (String): Constructor arguments for the contract (comma-separated).</p> </li> <li> <p><code>owner</code> (String!): Address of the owner deploying the contract.</p> </li> </ul> <p>\u2022  Returns: Details of the deployed contract.</p> <p>Definition:</p> <p><pre><code>mutation deployContract(\n  $config: String!,\n  $contract: String!,\n  $name: String!,\n  $arguments: String,\n  $owner: String!\n) {\n  deployContract(\n    config: $config,\n    contract: $contract,\n    name: $name,\n    arguments: $arguments,\n    owner: $owner\n  ): String\n}\n</code></pre> Example: <pre><code>mutation {\n  deployContract(\n    config: \"../path/to/service.config\",\n    contract: \"TokenCompiled.json\",\n    name: \"Token.sol:Token\",\n    arguments: \"1000\",\n    owner: \"0x3b706424119e09dcaad4acf21b10af3b33cde350\"\n  )\n}\n</code></pre> Sample Response <pre><code>{\n  \"data\": {\n    \"deployContract\": \"owner_address: \\\"0x3b706424119e09dcaad4acf21b10af3b33cde350\\\"\\ncontract_address: \\\"0xc975ab41e0c2042a0229925a2f4f544747fd66cd\\\"\\ncontract_name: \\\"Token.sol:Token\\\"\"\n  }\n}\n</code></pre></p>"},{"location":"api/#executecontract","title":"executeContract","text":"<p>Executes a function on a deployed smart contract.</p> <p>\u2022  Type: Mutation</p> <p>\u2022  Arguments:</p> <ul> <li> <p><code>config</code> (String!): Path to the configuration file.</p> </li> <li> <p><code>sender</code> (String!): Address of the sender invoking the function.</p> </li> <li> <p><code>contract</code> (String!): Address of the deployed contract.</p> </li> <li> <p><code>functionName</code> (String!): Name of the function to execute (including parameter types, e.g., transfer(address,uint256)).</p> </li> <li> <p><code>arguments</code> (String): Arguments for the function (comma-separated).</p> </li> </ul> <p>\u2022  Returns: Result of the function execution.</p> <p>Definition:</p> <p><pre><code>mutation executeContract(\n  $config: String!,\n  $sender: String!,\n  $contract: String!,\n  $functionName: String!,\n  $arguments: String\n) {\n  executeContract(\n    config: $config,\n    sender: $sender,\n    contract: $contract,\n    functionName: $functionName,\n    arguments: $arguments\n  ): String\n}\n</code></pre> Example: <pre><code>mutation {\n  executeContract(\n    config: \"../path/to/service.config\",\n    sender: \"0x3b706424119e09dcaad4acf21b10af3b33cde350\",\n    contract: \"0xc975ab41e0c2042a0229925a2f4f544747fd66cd\",\n    functionName: \"transfer(address,uint256)\",\n    arguments: \"0x4847155cbb6f2219ba9b7df50be11a1c7f23f829,100\"\n  )\n}\n</code></pre> Sample Response <pre><code>{\n  \"data\": {\n    \"executeContract\": \"Function executed successfully.\"\n  }\n}\n</code></pre></p>"},{"location":"blog/","title":"Blog Table of Contents","text":""},{"location":"blog/#application","title":"Application","text":"<ul> <li>ResChat</li> <li>ResLenses</li> <li>Using the ResilientDB Desktop Wallet</li> <li>CrypGo, Accessibility on the Go!</li> <li>Array\u00e1n - A Resilient Blockchain-based Food Supply Chain</li> <li>ResView - Visualizing Resilient DB</li> <li>The Emergence of Echo in the Gig Economy</li> <li>ResilientDB Blockchain Analyzer</li> <li>Using the NexRes Explorer</li> </ul>"},{"location":"blog/#application-stack-toolset","title":"Application Stack / Toolset","text":"<ul> <li>Dive into Smart Contracts with GraphQL API \ud83c\udf10</li> <li>Simplifying Database Interactions with ResDB ORM</li> <li>Getting Started with ResContract CLI \ud83d\ude80</li> <li>Using the ResilientDB TypeScript SDK</li> <li>Getting Started with Rust SDK</li> <li>Deploying ResilientDB</li> <li>Logging in ResilientDB</li> <li>Getting started with ResVault</li> <li>Getting Started On UTXO</li> <li>Using the NexRes Python SDK</li> <li>Getting Started with Smart Contract on Nexres</li> <li>NexRes Grafana Dashboard Pipeline</li> <li>NexRes Grafana Dashboard Installation</li> <li>Deploy Grafana Dashboard On Oracle Cloud</li> <li>Start your Application</li> <li>Running NexRes With KV Server</li> </ul>"},{"location":"blog/#theory","title":"Theory","text":"<ul> <li>Recovery and Checkpoint Protocols in NexRes</li> <li>GeoBFT in NexRes</li> <li>NexRes Durability Layer</li> <li>UTXO On NexRes</li> <li>RCC in NexRes</li> <li>NexRes - What is NexRes</li> <li>ResilientDB - File Structure</li> <li>ExpoLab Blockchain Speaker Series</li> <li>ResilientDB - Resources</li> <li>ResilientDB - PBFT Commit Algorithm</li> <li>ResilientDB - Passing Custom Messages</li> <li>ResilientDB - Getting Started</li> </ul>"},{"location":"contributors/","title":"Contributors","text":"<p>Thank you to all the amazing people who contribute to this project! \ud83d\udc99 </p> <p> cjcchen</p> <p> resilientdb</p> <p> sajjadrahnama</p> <p> DakaiKang</p> <p> gopuman</p> <p> glenn-chen</p> <p> juduarte00</p> <p> msadoghi</p> <p> Saipranav-Kotamreddy</p> <p> RohanSogani</p> <p> omahs</p> <p> NoBugInMyCode</p> <p> CalvinKirs</p> <p> AreaZR</p> <p> kamaci</p> <p> yuhaoran1214</p> <p> jbonofre</p> <p> ic4y</p> <p> xyhlinx</p>"},{"location":"installation/","title":"Installation Guide","text":"<p>Welcome to the installation guide for ResilientDB and its associated projects. This guide will help you set up the entire ResilientDB ecosystem on your machine using a custom-generated <code>INSTALL.sh</code> script.</p>"},{"location":"installation/#prerequisites","title":"\ud83d\udccb  Prerequisites","text":"<p>Before you begin, ensure you have the following installed on your system: NOTE: This project requires Ubuntu 20.04+</p> <ul> <li>Git: Version control system to clone repositories.</li> <li>Docker: For containerized deployment (optional).</li> <li>cURL or Wget: For downloading scripts.</li> <li>Bash Shell: To run shell scripts.</li> </ul>"},{"location":"installation/#custom-installation-script-generator","title":"\ud83d\udd27 Custom Installation Script Generator","text":"<p>Select the components you want to install, and a custom <code>INSTALL.sh</code> script will be generated for you.</p>  ResilientDB  PythonSDK  ResDBORM  Smart-Contracts CLI  Smart-Contracts GraphQL  ResVault Generate INSTALL.sh <p>Download your custom INSTALL.sh</p>"},{"location":"installation/#using-each-project-after-installation","title":"\ud83d\ude80 Using Each Project After Installation","text":"<p>Once you've installed the selected projects, check out the Usage Tab for more information:</p> <ul> <li>ResilientDB</li> <li>Python SDK</li> <li>ResDB-ORM</li> <li>Smart-Contracts-CLI</li> <li>Smart-Contracts-GraphQL</li> <li>ResVault</li> </ul>"},{"location":"usage/pythonsdk/","title":"ResilientDB SDK","text":""},{"location":"usage/pythonsdk/#check-python-is-up-to-date-39","title":"Check Python is up-to-date (3.9+)","text":"<p><code>$ python3 --version</code></p> <p>If your Python version number is too low you may encounter type hinting issues when attempting to run the code. You can use a Python virtual environment, as shown below.</p>"},{"location":"usage/pythonsdk/#first-time-set-up","title":"First-time set up","text":"<p><code>$ sh INSTALL.sh</code></p> <p><code>$ python3.10 -m venv venv</code></p> <p><code>$ source venv/bin/activate</code></p> <p><code>$ pip install -r requirements.txt</code></p> <p>The correct Python configuration is needed for transaction validation.</p>"},{"location":"usage/pythonsdk/#running-kv-service","title":"Running KV service","text":"<p>If your virtual environment is not already active:</p> <p><code>$ source venv/bin/activate</code></p> <p>Run the script to start 4 local nodes</p> <p><code>$ sh service/tools/start_kv_service_sdk.sh</code></p>"},{"location":"usage/pythonsdk/#running-crow-service-http-endpoints","title":"Running Crow service (HTTP endpoints)","text":"<p><code>$ bazel build service/http_server/crow_service_main</code></p> <p><code>$ bazel-bin/service/http_server/crow_service_main service/tools/config/interface/client.config service/http_server/server_config.config</code></p> <p>For a list of endpoints visit here</p>"},{"location":"usage/pythonsdk/#testing","title":"Testing","text":"<p><code>$ bazel-bin/service/kv_service/kv_service_tools service/tools/config/interface/service.config set test 1234</code></p>"},{"location":"usage/pythonsdk/#running-the-driver","title":"Running the driver","text":"<p>Examples of using the driver can be seen in test_driver</p> <p>Replace the db_root_url with the address of the ResilientDB HTTP endpoints e.g. <code>127.0.0.1:18000</code></p>"},{"location":"usage/pythonsdk/#todo","title":"TODO","text":"<ul> <li>Setting up linting (using black) through github hooks</li> <li>convert the sdk into a package (for pip install)</li> <li>Potentially have a docker setup which fetched the Resdb image and runs it locally</li> </ul>"},{"location":"usage/resdborm/","title":"ResDB-ORM","text":"<p>ResDB-ORM is a Python module designed to simplify interactions with ResilientDB's key-value store database by providing an Object-Relational Mapping (ORM) interface. This library allows developers to use basic CRUD functionalities with ease.</p>"},{"location":"usage/resdborm/#prerequisites","title":"Prerequisites","text":"<p>Before using this repository, ensure that the following services are running:</p> <ol> <li> <p>kv_server: This is the key-value store server that forms the backend for ResilientDB. Follow the instructions in the ResilientDB repository to set it up and start it.</p> </li> <li> <p>ResilientDB-GraphQL: This provides a GraphQL interface to interact with ResilientDB. Follow the instructions in the ResilientDB-GraphQL repository to set it up and start it.</p> </li> </ol>"},{"location":"usage/resdborm/#setting-up-prerequisites","title":"Setting up Prerequisites","text":"<p>You can use the provided INSTALL.sh script to automatically install and set up both the kv_server and ResilientDB-GraphQL services. The script will clone the necessary repositories, build the services, and start them.</p> <p>To use the INSTALL.sh script:</p> <pre><code>git clone https://github.com/ResilientEcosystem/ResDB-ORM.git\ncd ResDB-ORM\n./INSTALL.sh\n</code></pre>"},{"location":"usage/resdborm/#installation","title":"Installation","text":"<p>ResDB-ORM is also available on PyPI and can be installed using pip:</p> <pre><code>pip install resdb-orm\n</code></pre> <p>Once the above services are running, follow the steps below to set up and use ResDB-ORM.</p>"},{"location":"usage/resdborm/#1-clone-this-repository","title":"1. Clone this Repository","text":"<pre><code>git clone https://github.com/ResilientEcosystem/ResDB-ORM.git\ncd ResDB-ORM\n</code></pre> <p>Note: The script may require sudo privileges to install dependencies and set up services.</p>"},{"location":"usage/resdborm/#2-create-and-activate-a-virtual-environment","title":"2. Create and Activate a Virtual Environment","text":"<p>Set up a virtual environment to manage dependencies:</p> <pre><code>python3 -m venv venv\nsource venv/bin/activate\n</code></pre>"},{"location":"usage/resdborm/#3-install-dependencies","title":"3. Install Dependencies","text":"<p>Ensure that you have all necessary dependencies installed:</p> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"usage/resdborm/#4-configure-configyaml","title":"4. Configure  <code>config.yaml</code>","text":"<p>Update the  <code>config.yaml</code>  file to point to the correct Crow endpoint. After running ResilientDB-GraphQL, you should see output similar to the following:</p> <p><pre><code>(2024-08-17 00:03:53) [INFO    ] Crow/1.0 server is running at &lt;CROW_ENDPOINT&gt; using 16 threads\n(2024-08-17 00:03:53) [INFO    ] Call `app.loglevel(crow::LogLevel::Warning)` to hide Info level logs. \n</code></pre> Replace  <code>&lt;CROW_ENDPOINT&gt;</code>  in the  <code>config.yaml</code>  file with the actual endpoint URL from the above output.</p>"},{"location":"usage/resdborm/#5-verify-installation","title":"5. Verify Installation","text":"<p>Run the provided  <code>test.py</code>  script to verify that everything is set up correctly:</p> <p><pre><code>python test.py\n</code></pre> This script will perform basic operations to ensure that the connection to the ResilientDB instance is functional.</p>"},{"location":"usage/resdborm/#6-import-the-module-in-your-own-code","title":"6. Import the Module in Your Own Code","text":"<p>You can now import and use the  <code>ResDBORM</code>  module in your own projects:</p> <pre><code>from resdb_orm.orm import ResDBORM\n</code></pre>"},{"location":"usage/resdborm/#initialize-the-orm","title":"Initialize the ORM","text":"<pre><code>orm = ResDBORM()\n\n# Example usage: Create a new record\ndata = {\"key\": \"value\"}\nrecord_id = orm.create(data)\nprint(f\"Record created with ID: {record_id}\")` \n</code></pre>"},{"location":"usage/resdborm/#contributing","title":"Contributing","text":"<p>We welcome contributions to this project! Please feel free to submit pull requests, report issues, or suggest new features.</p>"},{"location":"usage/resdborm/#license","title":"License","text":"<p>This project is licensed under the  Apache License 2.0.</p>"},{"location":"usage/resilientdb/","title":"ResilientDB","text":""},{"location":"usage/resilientdb/#resilientdb-global-scale-sustainable-blockchain-fabric","title":"ResilientDB: Global-Scale Sustainable Blockchain Fabric","text":"<p>ResilientDB is a High Throughput Yielding Permissioned Blockchain Fabric founded by ExpoLab at UC Davis in 2018. ResilientDB advocates a system-centric design by adopting a multi-threaded architecture that encompasses deep pipelines. Further, ResilientDB separates the ordering of client transactions from their execution, which allows it to process messages out-of-order.</p>"},{"location":"usage/resilientdb/#downloads","title":"Downloads:","text":"<p>Download address for run-directly software package: https://downloads.apache.org/incubator/resilientdb/</p>"},{"location":"usage/resilientdb/#quick-facts-on-resilientdb","title":"Quick Facts on ResilientDB","text":"<ol> <li>ResilientDB orders client transactions through a highly optimized implementation of the  PBFT [Castro and Liskov, 1998] protocol, which helps to achieve consensus among its replicas. ResilientDB also supports deploying other state-of-the-art consensus protocols [release are planned] such as GeoBFT [blog, released], PoE, RCC, RingBFT, PoC, SpotLess, HotStuff, and DAG.</li> <li>ResilientDB requires deploying at least 3f+1 replicas, where f (f &gt; 0) is the maximum number of arbitrary (or malicious) replicas.</li> <li>ResilientDB supports primary-backup architecture, which designates one of the replicas as the primary (replica with identifier 0). The primary replica initiates consensus on a client transaction, while backups agree to follow a non-malicious primary.</li> <li>ResilientDB exposes a wide range of interfaces such as a Key-Value store, Smart Contracts, UTXO, and Python SDK. Following are some of the decentralized applications (DApps) built on top of ResilientDB: NFT Marketplace and Debitable.</li> <li>To persist blockchain, chain state, and metadata, ResilientDB provides durability through  LevelDB.</li> <li>ResilientDB provides access to a seamless GUI display for deployment and maintenance, and supports  Grafana for plotting monitoring data. </li> <li>[Historial Facts] The ResilientDB project was founded by Mohammad Sadoghi along with his students (Suyash Gupta as the lead Architect, Sajjad Rahnama as the lead System Designer, and Jelle Hellings) at UC Davis in 2018 and was open-sourced in late 2019. On September 30, 2021, we released ResilientDB v-3.0. In 2022, ResilientDB was completely re-written and re-architected (Junchao Chen as the lead Architect, Dakai Kang as the lead Recovery Architect along with the entire NexRes Team), paving the way for a new sustainable foundation, referred to as NexRes (Next Generation ResilientDB). Thus, on September 30, 2022, NexRes-v1.0.0 was born, marking a new beginning for ResilientDB. On October 21, 2023, ResilientDB was officially accepted into Apache Incubation.</li> </ol>"},{"location":"usage/resilientdb/#online-documentation","title":"Online Documentation:","text":"<p>The latest ResilientDB documentation, including a programming guide, is available on our blog repository. This README file provides basic setup instructions.</p>"},{"location":"usage/resilientdb/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Software Stack Architecture </li> <li>SDK, Interface/API, Platform, Execution, and Chain Layers </li> <li>Detailed API Documentation: Core and SDK</li> <li>SDK Layer: Python SDK and Wallet - ResVault</li> <li>Interface Layer: Key-Value, Solidity Smart Contract, Unspent Transaction Output (UTXO) Model, ResilientDB Database Connectivity (RDBC) API</li> <li>Platform Layer: Consensus Manager Architecture (ordering, recovery, network, chain management)</li> <li>Recovery &amp; Checkpoint Design</li> <li>Execution Layer: Transaction Manager Design (Runtime) </li> <li>Chain Layer: Chain State &amp; Storage Manager Design (durability) </li> <li>Installing &amp; Deploying ResilientDB</li> <li>Build Your First Application: KV Service, UTXO</li> <li>Dashboard: Monitoring, Deployment, Data Pipeline</li> <li>System Parameters &amp; Configuration   </li> <li>Continuous Integration &amp; Testing </li> </ol>"},{"location":"usage/resilientdb/#os-requirements","title":"OS Requirements","text":"<p>Ubuntu 20+</p>"},{"location":"usage/resilientdb/#build-and-deploy-resilientdb","title":"Build and Deploy ResilientDB","text":"<p>Next, we show how to quickly build ResilientDB and deploy 4 replicas and 1 client proxy on your local machine. The proxy acts as an interface for all the clients. It batches client requests and forwards these batches to the replica designated as the leader. The 4 replicas participate in the PBFT consensus to order and execute these batches. Post execution, they return the response to the leader.</p> <p>Install dependencies:</p> <pre><code>./INSTALL.sh\n</code></pre> <p>For non-root users, see INSTALL/README.md</p> <p>Run ResilientDB (Providing a Key-Value Service):</p> <pre><code>./service/tools/kv/server_tools/start_kv_service.sh\n</code></pre> <ul> <li>This script starts 4 replicas and 1 client. Each replica instantiates a key-value store.</li> </ul> <p>Build Interactive Tools:</p> <pre><code>bazel build service/tools/kv/api_tools/kv_service_tools\n</code></pre>"},{"location":"usage/resilientdb/#issues","title":"Issues","text":"<p>If you cannot build the project successfully, try to reduce the bazel jobs here.</p>"},{"location":"usage/resilientdb/#functions","title":"Functions","text":"<p>ResilientDB supports two types of functions: version-based and non-version-based. Version-based functions will leverage versions to protect each update, versions must be obtained before updating a key.</p> <p>Note: Version-based functions are not compatible with non-version-based functions. Do not use both in your applications.</p> <p>We show the functions below and show how to use kv_service_tools to test the function.</p>"},{"location":"usage/resilientdb/#version-based-functions","title":"Version-Based Functions","text":""},{"location":"usage/resilientdb/#get","title":"Get","text":"<p>Obtain the value of <code>key</code> with a specific version <code>v</code>.</p> <pre><code>  kv_service_tools --config config_file --cmd get_with_version --key key --version v\n</code></pre> parameters descriptions config the path of the client config which points to the db entrance cmd get_with_version key the key you want to obtain version the version you want to obtain. (If the <code>v</code> is 0, it will return the latest version <p>Example:</p> <pre><code>  bazel-bin/service/tools/kv/api_tools/kv_service_tools --config service/tools/config/interface/service.config --cmd get_with_version --key key1 --version 0\n</code></pre> <p>Results:</p> <p>get key = key1, value = value: \"v2\" version: 2</p>"},{"location":"usage/resilientdb/#set","title":"Set","text":"<p>Set <code>value</code> to the key <code>key</code> based on version <code>v</code>.</p> <pre><code>  kv_service_tools --config config_file --cmd set_with_version --key key --version v --value value\n</code></pre> parameters descriptions config the path of the client config which points to the db entrance cmd set_with_version key the key you want to set version the version you have obtained. (If the version has been changed during the update, the transaction will be ignored) value the new value <p>Example:</p> <pre><code>  bazel-bin/service/tools/kv/api_tools/kv_service_tools --config service/tools/config/interface/service.config --cmd set_with_version --key key1 --version 0 --value v1\n</code></pre> <p>Results:</p> <p>set key = key1, value = v3, version = 2 done, ret = 0</p> <p>current value = value: \"v3\" version: 3</p>"},{"location":"usage/resilientdb/#get-key-history","title":"Get Key History","text":"<p>Obtain the update history of key <code>key</code> within the versions [<code>v1</code>, <code>v2</code>].</p> <pre><code>  kv_service_tools --config config_file --cmd get_history --key key --min_version v1 --max_version v2\n</code></pre> parameters descriptions config the path of the client config which points to the db entrance cmd get_history key the key you want to obtain min_version the minimum version you want to obtain max_version the maximum version you want to obtain <p>Example:</p> <pre><code>  bazel-bin/service/tools/kv/api_tools/kv_service_tools --config service/tools/config/interface/service.config --cmd get_history --key key1 --min_version 1 --max_version 2\n</code></pre> <p>Results:</p> <p>get history key = key1, min version = 1, max version = 2   value =  item {   \u2002 key: \"key1\"   \u2002 value_info {   \u2002\u2002 value: \"v1\"   \u2002\u2002 version: 2  \u2002}  }  item {  \u2002 key: \"key1\"  \u2002 value_info {  \u2002\u2002 value: \"v0\"  \u2002\u2002 version: 1  \u2002}  } </p>"},{"location":"usage/resilientdb/#get-top","title":"Get Top","text":"<p>Obtain the recent <code>top_number</code> history of the key <code>key</code>.</p> <pre><code>  kv_service_tools --config config_path --cmd get_top --key key --top top_number\n</code></pre> parameters descriptions config the path of the client config which points to the db entrance cmd get_top key the key you want to obtain top the number of the recent updates <p>Example:</p> <pre><code>  bazel-bin/service/tools/kv/api_tools/kv_service_tools --config service/tools/config/interface/service.config --cmd get_top --key key1 --top 1\n</code></pre> <p>Results:</p> <p>key = key1, top 1  value =  item {  \u2002key: \"key1\"   \u2002value_info {   \u2002\u2002  value: \"v2\"   \u2002\u2002  version: 3   \u2002}  }</p>"},{"location":"usage/resilientdb/#get-key-range","title":"Get Key Range","text":"<p>Obtain the values of the keys in the ranges [<code>key1</code>, <code>key2</code>]. Do not use this function in your practice code</p> <pre><code>  kv_service_tools --config config_file --cmd get_key_range_with_version --min_key key1 --max_key key2\n</code></pre> parameters descriptions config the path of the client config which points to the db entrance cmd get_key_range_with_version min_key the minimum key max_key the maximum key <p>Example:</p> <pre><code>  bazel-bin/service/tools/kv/api_tools/kv_service_tools --config service/tools/config/interface/service.config --cmd get_key_range_with_version --min_key key1 --max_key key3\n</code></pre> <p>Results:</p> <p>min key = key1 max key = key2  getrange value =  item {  \u2002 key: \"key1\"  \u2002 value_info {  \u2002\u2002   value: \"v0\"  \u2002\u2002   version: 1  \u2002 }  }  item {  \u2002 key: \"key2\"  \u2002 value_info {  \u2002\u2002   value: \"v1\"  \u2002\u2002   version: 1  \u2002 }  }</p>"},{"location":"usage/resilientdb/#non-version-based-function","title":"Non-Version-Based Function","text":""},{"location":"usage/resilientdb/#set_1","title":"Set","text":"<p>Set <code>value</code> to the key <code>key</code>.</p> <pre><code>  kv_service_tools --config config_file --cmd set --key key --value value\n</code></pre> parameters descriptions config the path of the client config which points to the db entrance cmd set key the key you want to set value the new value <p>Example:</p> <pre><code>  bazel-bin/service/tools/kv/api_tools/kv_service_tools --config service/tools/config/interface/service.config --cmd set --key key1 --value value1\n</code></pre> <p>Results:</p> <p>set key = key1, value = v1, done, ret = 0</p>"},{"location":"usage/resilientdb/#get_1","title":"Get","text":"<p>Obtain the value of <code>key</code>.</p> <pre><code>  kv_service_tools --config config_file --cmd get --key key\n</code></pre> parameters descriptions config the path of the client config which points to the db entrance cmd get key the key you want to obtain <p>Example:</p> <pre><code>  bazel-bin/service/tools/kv/api_tools/kv_service_tools --config service/tools/config/interface/service.config --cmd get --key key1\n</code></pre> <p>Results:</p> <p>get key = key1, value = \"v2\"</p>"},{"location":"usage/resilientdb/#get-key-range_1","title":"Get Key Range","text":"<p>Obtain the values of the keys in the ranges [<code>key1</code>, <code>key2</code>]. Do not use this function in your practice code</p> <pre><code>  kv_service_tools --config config_path --cmd get_key_range --min_key key1 --max_key key2\n</code></pre> parameters descriptions config the path of the client config which points to the db entrance cmd get_key_range min_key the minimum key max_key the maximum key <p>Example:</p> <pre><code>  bazel-bin/service/tools/kv/api_tools/kv_service_tools --config service/tools/config/interface/service.config --cmd get_key_range --min_key key1 --max_key key3\n</code></pre> <p>Results:</p> <p>getrange min key = key1, max key = key3  value = [v3,v2,v1]</p>"},{"location":"usage/resilientdb/#deployment-script","title":"Deployment Script","text":"<p>We also provide access to a deployment script that allows deployment on distinct machines.</p>"},{"location":"usage/resilientdb/#deploy-via-docker","title":"Deploy via Docker","text":"<ol> <li> <p>Install Docker    Before getting started, make sure you have Docker installed on your system. If you don't have Docker already, you can download and install it from the official Docker website.</p> </li> <li> <p>Pull the Latest ResilientDB Image    Choose the appropriate ResilientDB image for your machine's architecture:</p> </li> <li> <p>For amd architecture, run:      <pre><code>docker pull expolab/resdb:amd64\n</code></pre></p> </li> <li> <p>For Apple Silicon (M1/M2) architecture, run:      <pre><code>docker pull expolab/resdb:arm64\n</code></pre></p> </li> <li> <p>Run a Container with the Pulled Image    Launch a Docker container using the ResilientDB image you just pulled:</p> </li> <li> <p>For amd architecture, run:      <pre><code>docker run -d --name myserver expolab/resdb:amd64\n</code></pre></p> </li> <li> <p>For Apple Silicon (M1/M2) architecture, run:      <pre><code>docker run -d --name myserver expolab/resdb:arm64\n</code></pre></p> </li> <li> <p>Test with Set and Get Commands    Exec into the running server:    <pre><code>docker exec -it myserver bash\n</code></pre></p> </li> <li> <p>NOTE: If you encounter a Connection Refused error</p> </li> </ol> <p>Run the following command within the container:    <pre><code>./service/tools/kv/server_tools/start_kv_service.sh\n</code></pre></p> <p>Verify the functionality of the service by performing set and get operations provided above functions.</p>"},{"location":"usage/resilientdb/#custom-ports","title":"Custom Ports","text":"<p>When starting the service locally, current services are running on 10000 port-base with 5 services where the server config is located here</p> <p>If you want to change the setting,  you need to generate the certificates.</p> <p>Go the the workspace where the resilientdb repo is localted.</p> <p>Change the setting parameters here and run the script:   <pre><code>./service/tools/kv/server_tools/generate_config.sh\n</code></pre></p> <p>Then re-run the start script:   <pre><code>./service/tools/kv/server_tools/start_kv_service.sh\n</code></pre></p>"},{"location":"usage/resilientdb/#smart-contract","title":"Smart Contract","text":"<p>If you want to use smart contracts, please go to: https://blog.resilientdb.com/2025/02/14/GettingStartedSmartContract.html</p>"},{"location":"usage/resvault/","title":"ResVault","text":""},{"location":"usage/resvault/#about","title":"About","text":"<p>ResVault is a chrome extension that serves as a wallet for ResilientDB. ResilientDB is a High Throughput Yielding Permissioned Blockchain Fabric founded by ExpoLab at UC Davis in 2018. ResilientDB advocates a system-centric design by adopting a multi-threaded architecture that encompasses deep pipelines. Further, ResilientDB separates the ordering of client transactions from their execution, which allows it to process messages out-of-order.</p> <ul> <li>Create Account</li> <li>Delete Account</li> <li>Login</li> <li>Submit Transactions</li> <li>Transactions logging</li> </ul> <p>Pending: - [ ] Password improvement - [ ] User Profiles - [ ] Multi-account support - [ ] Transaction details - [ ] View all transactions</p>"},{"location":"usage/resvault/#installation","title":"Installation","text":""},{"location":"usage/resvault/#via-github-release","title":"Via GitHub release","text":"<p>Open chrome://extensions/ in Google Chrome, toggle Developer mode on: - Click on Load unpacked - Select the build folder that you downloaded from the GitHub releases.</p>"},{"location":"usage/resvault/#via-chrome-webstore","title":"Via Chrome Webstore","text":"<p>Coming Soon</p>"},{"location":"usage/resvault/#build","title":"Build","text":"<p>NodeJS is required. Open <code>terminal</code> and execute: <pre><code>git clone https://github.com/ResilientApp/ResVault.git\ncd ResVault\nnpm install\nnpm run build\n</code></pre></p>"},{"location":"usage/resvault/#example-usage","title":"Example Usage","text":""},{"location":"usage/resvault/#demo-video","title":"Demo Video","text":"<p>Coming Soon</p>"},{"location":"usage/resvault/#links","title":"Links","text":"<ul> <li>Website</li> </ul>"},{"location":"usage/resvault/#contributing","title":"Contributing","text":"<p>Before creating an issue, please ensure that it hasn't already been reported/suggested.</p> <p>The issue tracker is only for bug reports and enhancement suggestions. If you have a question, please reach out to apratim@expolab.org instead of opening an issue \u2013 you will get redirected there anyway.</p> <p>If you wish to contribute to the ResVault codebase or documentation, feel free to fork the repository and submit a pull request.</p>"},{"location":"usage/resvault/#help","title":"Help","text":"<p>If you don't understand something in the documentation, you are experiencing problems, or you just need a gentle nudge in the right direction, please don't hesitate to reach out to apratim@expolab.org.</p>"},{"location":"usage/smart-contracts-cli/","title":"ResContract CLI \ud83d\ude80","text":"<p>The ResContract CLI is a command-line tool for creating, deploying, and managing smart contracts within the ResilientDB ecosystem. It provides a streamlined interface for developers and students to interact with smart contracts efficiently.</p>"},{"location":"usage/smart-contracts-cli/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Features \u2728</li> <li>Prerequisites</li> <li>Installation \ud83d\udee0\ufe0f</li> <li>Usage</li> <li>Commands<ul> <li>create Command</li> <li>compile Command</li> <li>deploy Command</li> <li>execute Command</li> </ul> </li> <li>Configuration \u2699\ufe0f</li> <li>Setting the ResDB_Home Variable<ul> <li>Option 1: Set <code>ResDB_Home</code> Environment Variable</li> <li>Option 2: Use a <code>config.yaml</code> File</li> </ul> </li> <li>Contributing</li> <li>License</li> </ul>"},{"location":"usage/smart-contracts-cli/#features","title":"Features \u2728","text":"<ul> <li>Create Smart Contracts: Generate new smart contract templates.</li> <li>Compile Contracts: Compile Solidity contracts to JSON.</li> <li>Deploy Smart Contracts: Deploy contracts to the blockchain.</li> <li>Execute Functions: Interact with and manage deployed contracts.</li> </ul>"},{"location":"usage/smart-contracts-cli/#prerequisites","title":"Prerequisites","text":"<p>Before installing and using the ResContract CLI, ensure you have the following prerequisites installed on your system:</p> <ul> <li>Node.js (version &gt;= 14): Download and install Node.js</li> <li>npm: Comes with Node.js. Ensure it's up-to-date.</li> <li>Solidity Compiler (<code>solc</code>): Required to compile smart contracts.</li> </ul>"},{"location":"usage/smart-contracts-cli/#installing-solc","title":"Installing <code>solc</code>","text":""},{"location":"usage/smart-contracts-cli/#linux-ubuntudebian","title":"Linux (Ubuntu/Debian)","text":"<pre><code>sudo add-apt-repository ppa:ethereum/ethereum\nsudo apt-get update\nsudo apt-get install -y solc\n</code></pre>"},{"location":"usage/smart-contracts-cli/#macos","title":"macOS","text":"<pre><code>brew update\nbrew upgrade\nbrew tap ethereum/ethereum\nbrew install solidity\n</code></pre>"},{"location":"usage/smart-contracts-cli/#installation","title":"Installation \ud83d\udee0\ufe0f","text":"<p>Install the ResContract CLI globally using npm:</p> <pre><code>npm install -g rescontract-cli\n```` \n\n## Configuration \u2699\ufe0f\n\n### Setting the ResDB_Home Variable\n\nBefore using the ResContract CLI, you  **must**  set the  `ResDB_Home`  environment variable or provide the path to your ResilientDB installation in a  `config.yaml`  file. The CLI will  **not**  prompt you for this path and will exit with an error if it's not set.\n\n#### Option 1: Set  `ResDB_Home`  Environment Variable\n\nSet the  `ResDB_Home`  environment variable to point to the directory where ResilientDB is installed.\n\n**Linux/macOS:**\n```bash\nexport ResDB_Home=/path/to/resilientdb\n</code></pre> <p>Add the above line to your  <code>.bashrc</code>  or  <code>.zshrc</code>  file to make it persistent.</p>"},{"location":"usage/smart-contracts-cli/#option-2-use-a-configyaml-file","title":"Option 2: Use a  <code>config.yaml</code>  File","text":"<p>Update the <code>config.yaml</code>  file in the same directory where you run the  <code>rescontract</code>  command or in your home directory.</p> <p>Example  <code>config.yaml</code>: <pre><code>ResDB_Home: /path/to/resilientdb\n</code></pre></p> <p>Ensure the  <code>ResDB_Home</code>  path is correct.</p> <p>Note:  The CLI checks for  <code>config.yaml</code>  in the current directory first, then in your home directory.</p>"},{"location":"usage/smart-contracts-cli/#usage","title":"Usage","text":"<p>After installation, you can use the  <code>rescontract</code>  command in your terminal.</p> <pre><code>rescontract &lt;command&gt; [options]\n</code></pre>"},{"location":"usage/smart-contracts-cli/#commands","title":"Commands","text":""},{"location":"usage/smart-contracts-cli/#create-command","title":"create Command","text":"<p>Initializes a new account using ResilientDB's smart contract tools.</p> <p>Usage: <pre><code>rescontract create --config &lt;path_to_config&gt;\n</code></pre> -   <code>--config, -c</code>: Path to the configuration file.</p> <p>Example:</p> <pre><code>rescontract create --config ~/resilientdb/config/service.config\n</code></pre>"},{"location":"usage/smart-contracts-cli/#compile-command","title":"compile Command","text":"<p>Compiles a Solidity smart contract into a JSON file using  <code>solc</code>.</p> <p>Usage: <pre><code>rescontract compile --sol &lt;inputFile.sol&gt; --output &lt;outputFile.json&gt;\n</code></pre></p> <ul> <li><code>--sol, -s</code>: Path to the Solidity smart contract file.</li> <li><code>--output, -o</code>: Name of the resulting JSON file.</li> </ul> <p>Example:</p> <pre><code>rescontract compile --sol contracts/MyToken.sol --output build/MyToken.json\n</code></pre>"},{"location":"usage/smart-contracts-cli/#deploy-command","title":"deploy Command","text":"<p>Deploys the smart contract to the blockchain.</p> <p>Usage:</p> <pre><code>rescontract deploy --config &lt;service.config&gt; --contract &lt;contract.json&gt; \\\n--name &lt;tokenName&gt; --arguments \"&lt;parameters&gt;\" --owner &lt;address&gt;\n</code></pre> <ul> <li><code>--config, -c</code>: Client configuration path.</li> <li><code>--contract, -p</code>: Path to the contract JSON file.</li> <li><code>--name, -n</code>: Name of the contract.</li> <li><code>--arguments, -a</code>: Parameters to create the contract object (enclosed in quotes).</li> <li><code>--owner, -m</code>: Contract owner's address.</li> </ul> <p>Example:</p> <pre><code>rescontract deploy --config ~/resilientdb/config/service.config \\\n--contract build/MyToken.json --name MyToken \\\n--arguments \"1000000\" --owner 0xYourAddress\n</code></pre>"},{"location":"usage/smart-contracts-cli/#execute-command","title":"execute Command","text":"<p>Executes a smart contract function.</p> <p>Usage:</p> <pre><code>rescontract execute --config &lt;service.config&gt; --sender &lt;senderAddress&gt; \\\n--contract &lt;contractAddress&gt; --function-name &lt;functionName&gt; --arguments \"&lt;parameters&gt;\"\n</code></pre> <ul> <li><code>--config, -c</code>: Path to the client configuration file.</li> <li><code>--sender, -m</code>: Address of the sender executing the function.</li> <li><code>--contract, -s</code>: Address of the deployed contract.</li> <li><code>--function-name, -f</code>: Name of the function to execute (include parameter types).</li> <li><code>--arguments, -a</code>: Arguments to pass to the function (enclosed in quotes).</li> </ul> <p>Example: <pre><code>rescontract execute --config ~/resilientdb/config/service.config \\\n--sender 0xYourAddress --contract 0xContractAddress \\\n--function-name \"transfer(address,uint256)\" \\\n--arguments \"0xRecipientAddress,100\"\n</code></pre></p>"},{"location":"usage/smart-contracts-cli/#license","title":"License","text":"<p>This project is licensed under the MIT License - see the  LICENSE  file for details.</p>"},{"location":"usage/smart-contracts-graphql/","title":"Smart Contracts GraphQL API","text":"<p>This repository provides a GraphQL API that allows users to interact with smart contracts in the ResilientDB ecosystem through a set of GraphQL queries and mutations. The API leverages the <code>rescontract-cli</code> tool to perform various functions, including creating accounts, compiling contracts, deploying contracts, and executing contract functions.</p>"},{"location":"usage/smart-contracts-graphql/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Prerequisites</li> <li>Installation</li> <li>Configuration</li> <li>Running the Server</li> <li>GraphQL API</li> <li>Mutations</li> <li>Sample Mutations<ul> <li>Using Type \u201cpath\u201d</li> <li>Using Type \u201cdata\u201d</li> </ul> </li> <li>Contributing</li> <li>License</li> </ul>"},{"location":"usage/smart-contracts-graphql/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following prerequisites:</p> <ol> <li> <p>ResilientDB: A running instance of ResilientDB with the smart contracts service running. More information and setup instructions can be found here: ResilientDB</p> </li> <li> <p>ResContract CLI: Install the <code>rescontract-cli</code> tool globally. Follow the instructions in the ResContract CLI Repository to install and configure it.</p> </li> </ol> <pre><code>npm install -g rescontract-cli\n</code></pre> <ol> <li> <p>Node.js (version &gt;= 15.6.0):  Download and install Node.js version 15.6.0 or higher, as the application uses crypto.randomUUID() which was introduced in Node.js v15.6.0.</p> <pre><code># You can check your Node.js version with:\nnode -v\n</code></pre> </li> </ol> <p>The prerequisites listed above can be installed using the <code>INSTALL.sh</code> script:</p> <pre><code>chmod +x INSTALL.sh\n./INSTALL.sh\n</code></pre>"},{"location":"usage/smart-contracts-graphql/#installation","title":"Installation","text":"<p>To set up the project, follow these steps:</p> <ol> <li> <p>Clone the repository:</p> <pre><code>git clone https://github.com/ResilientEcosystem/smart-contracts-graphql.git\ncd smart-contracts-graphql\n</code></pre> </li> <li> <p>Install dependencies:</p> <pre><code> npm install\n</code></pre> </li> </ol>"},{"location":"usage/smart-contracts-graphql/#configuration","title":"Configuration","text":"<p>Ensure that the  <code>ResContract CLI</code>  is properly configured. You need to set the  <code>ResDB_Home</code>  environment variable or provide a  <code>config.yaml</code>  file as required by the CLI.</p> <p>Refer to the  ResContract CLI README  for detailed instructions.</p>"},{"location":"usage/smart-contracts-graphql/#running-the-server","title":"Running the Server","text":"<p>Start the server using the following command:</p> <pre><code>npm start\n</code></pre> <p>The server will start running on port  <code>8400</code>. You can access the GraphQL API at  <code>http://localhost:8400/graphql</code>.</p>"},{"location":"usage/smart-contracts-graphql/#graphql-api","title":"GraphQL API","text":"<p>The GraphQL API supports the following mutations to interact with smart contracts.</p>"},{"location":"usage/smart-contracts-graphql/#mutations","title":"Mutations","text":""},{"location":"usage/smart-contracts-graphql/#createaccount","title":"<code>createAccount</code>","text":"<p>Creates a new account using the specified configuration file.</p> <p>Type: Mutation</p> <p>Arguments:</p> <ul> <li><code>config</code>  (String!): Configuration data or path to the configuration file.</li> <li><code>type</code>  (String): Optional. Specifies whether config is data or a file path. Accepts \"data\" or \"path\". Defaults to \"path\".</li> </ul> <p>Returns: String - Address of the newly created account or an error message.</p>"},{"location":"usage/smart-contracts-graphql/#compilecontract","title":"<code>compileContract</code>","text":"<p>Compiles a smart contract from the specified source.</p> <p>Type: Mutation</p> <p>Arguments:</p> <ul> <li><code>source</code>  (String!): Solidity code or path to the source file of the smart contract.</li> <li><code>type</code>  (String): Optional. Specifies whether config is data or a file path. Accepts \"data\" or \"path\". Defaults to \"path\".</li> </ul> <p>Returns: String - Name of the compiled contract JSON file or an error message.</p>"},{"location":"usage/smart-contracts-graphql/#deploycontract","title":"<code>deployContract</code>","text":"<p>Deploys a smart contract using the specified configuration, contract file, contract name, arguments, and owner address.</p> <p>Type: Mutation</p> <p>Arguments:</p> <ul> <li><code>config</code>  (String!): Configuration data or path to the configuration file.</li> <li><code>contract</code>  (String!): Path to the contract JSON file.</li> <li><code>name</code>  (String!): Name of the contract (include the full path and contract name).</li> <li><code>arguments</code>  (String!): Constructor arguments for the contract (comma-separated).</li> <li><code>owner</code>  (String!): Owner address.</li> <li><code>type</code>  (String): Optional. Specifies whether config is data or a file path. Accepts \"data\" or \"path\". Defaults to \"path\".</li> </ul> <p>Returns: String - Details of the deployed contract or an error message.</p>"},{"location":"usage/smart-contracts-graphql/#executecontract","title":"<code>executeContract</code>","text":"<p>Executes a function of a deployed smart contract.</p> <p>Type: Mutation</p> <p>Arguments:</p> <ul> <li><code>config</code>  (String!): Configuration data or path to the configuration file.</li> <li><code>sender</code>  (String!): Address of the sender.</li> <li><code>contract</code>  (String!): Address of the deployed contract.</li> <li><code>functionName</code>  (String!): Name of the function to execute (include parameter types).</li> <li><code>arguments</code>  (String!): Arguments for the function (comma-separated).</li> <li><code>type</code>  (String): Optional. Specifies whether config is data or a file path. Accepts \"data\" or \"path\". Defaults to \"path\".</li> </ul> <p>Returns: String - Result of the function execution or an error message.</p>"},{"location":"usage/smart-contracts-graphql/#sample-mutations","title":"Sample Mutations","text":"<p>Below are sample mutations demonstrating how to use the API with both \"path\" and \"data\" types.</p>"},{"location":"usage/smart-contracts-graphql/#using-type-path","title":"Using type <code>path</code>","text":"<p>The <code>type</code> option defaults to \"path\" and doesn't have to be explicitly set. </p> <ol> <li>Create Account</li> </ol> <pre><code>mutation {\n  createAccount(config: \"../incubator-resilientdb/service/tools/config/interface/service.config\")\n}\n</code></pre> <p>Sample Response: <pre><code>{\n  \"data\": {\n    \"createAccount\": \"0x67c6697351ff4aec29cdbaabf2fbe3467cc254f8\"\n  }\n}\n</code></pre></p> <p>Explanation: Creates a new account using the configuration file located at the specified path.</p> <ol> <li>Compile Contract <pre><code>mutation {\n  compileContract(\n    source: \"token.sol\"\n  )\n}\n</code></pre></li> </ol> <p>Sample Response: <pre><code>{\n  \"data\": {\n    \"compileContract\": \"Compiled successfully to /users/yourusername/smart-contracts-graphql/compiled_contracts/MyContract.json\"\n  }\n}\n</code></pre> Explanation: Compiles the smart contract located at token.sol and saves the compiled JSON to the compiled_contracts directory.</p> <ol> <li>Deploy Contract <pre><code>mutation {\n  deployContract(\n    config: \"../incubator-resilientdb/service/tools/config/interface/service.config\",\n    contract: \"compiled_contracts/MyContract.json\",\n    name: \"token.sol:Token\",\n    arguments: \"1000\",\n    owner: \"0x67c6697351ff4aec29cdbaabf2fbe3467cc254f8\"\n  )\n  {\n    ownerAddress\n    contractAddress\n    contractName\n  }\n}\n</code></pre></li> </ol> <p>Sample Response: <pre><code>{\n  \"data\": {\n    \"deployContract\": {\n      \"ownerAddress\": \"0x67c6697351ff4aec29cdbaabf2fbe3467cc254f8\",\n      \"contractAddress\": \"0xfc08e5bfebdcf7bb4cf5aafc29be03c1d53898f1\",\n      \"contractName\": \"token.sol:Token\"\n    }\n  }\n}\n</code></pre> Explanation: Deploys the compiled contract using the specified parameters.</p> <ol> <li>Execute Contract <pre><code>mutation {\n  executeContract(\n    config: \"../incubator-resilientdb/service/tools/config/interface/service.config\",\n    sender: \"0x67c6697351ff4aec29cdbaabf2fbe3467cc254f8\",\n    contract: \"0xfc08e5bfebdcf7bb4cf5aafc29be03c1d53898f1\",\n    functionName: \"transfer(address,uint256)\",\n    arguments: \"0x1be8e78d765a2e63339fc99a66320db73158a35a,100\"\n  )\n}\n</code></pre></li> </ol> <p>Sample Response: <pre><code>{\n  \"data\": {\n    \"executeContract\": \"Execution successful\"\n  }\n}\n</code></pre> Explanation: Executes the transfer function of the deployed contract, transferring 100 tokens to the specified address.</p>"},{"location":"usage/smart-contracts-graphql/#using-type-data","title":"Using type <code>data</code>","text":"<p>In this mode, the API accepts configuration data and Solidity code directly, without needing file paths.</p> <ol> <li>Create Account</li> </ol> <pre><code>mutation {\n  createAccount(\n    config: \"5 127.0.0.1 10005\",\n    type: \"data\"\n  )\n}\n</code></pre> <p>Sample Response: <pre><code>{\n  \"data\": {\n    \"createAccount\": \"0x255d051758e95ed4abb2cdc69bb454110e827441\"\n  }\n}\n</code></pre></p> <p>Explanation: Creates a new account using the provided configuration data.</p> <ol> <li>Compile Contract <pre><code>mutation {\n  compileContract(\n    source: \"\"\"\n    pragma solidity ^0.8.0;\n        ...\n        ...\n    }\n    \"\"\",\n    type: \"data\"\n  )\n}\n</code></pre></li> </ol> <p>Sample Response: <pre><code>{\n  \"data\": {\n    \"compileContract\": \"contract-20f42b42-f56f-45e8-8264-33cf8d93f8be.json\"\n  }\n}\n</code></pre> Explanation: Compiles the provided Solidity code and returns the name of the compiled contract JSON file stored in the compiled_contracts directory.</p> <ol> <li>Deploy Contract <pre><code>mutation {\n  deployContract(\n    config: \"5 127.0.0.1 10005\",\n    contract: \"contract-20f42b42-f56f-45e8-8264-33cf8d93f8be.json\",\n    name: \"/path/to/.json/file:Token\",\n    arguments: \"1000\",\n    owner: \"0x255d051758e95ed4abb2cdc69bb454110e827441\",\n    type: \"data\"\n  )\n}\n</code></pre></li> </ol> <p>Sample Response: <pre><code>{\n  \"data\": {\n    \"deployContract\": \"owner_address: 0x255d051758e95ed4abb2cdc69bb454110e827441\\ncontract_address: 0xb616e4c564b03fe336333758739a7d7ee0227d5d\\ncontract_name: Token\"\n  }\n}\n</code></pre> Explanation: Deploys the compiled contract using the configuration data and the compiled contract JSON file name returned from the compileContract mutation.</p> <ol> <li>Execute Contract <pre><code>mutation {\n  executeContract(\n    config: \"5 127.0.0.1 10005\",\n    sender: \"0x255d051758e95ed4abb2cdc69bb454110e827441\",\n    contract: \"0xb616e4c564b03fe336333758739a7d7ee0227d5d\",\n    functionName: \"transfer(address,uint256)\",\n    arguments: \"0x213ddc8770e93ea141e1fc673e017e97eadc6b96,100\",\n    type: \"data\"\n  )\n}\n</code></pre></li> </ol> <p>Sample Response: <pre><code>{\n  \"data\": {\n    \"executeContract\": \"result: 0x0000000000000000000000000000000000000000000000000000000000000001\"\n  }\n}\n</code></pre> Explanation: Executes the transfer function of the deployed contract, transferring 100 tokens to the specified address, using configuration data.</p>"},{"location":"usage/smart-contracts-graphql/#license","title":"License","text":"<p>This project is licensed under the Apache License - see the  LICENSE  file for details.</p>"}]}